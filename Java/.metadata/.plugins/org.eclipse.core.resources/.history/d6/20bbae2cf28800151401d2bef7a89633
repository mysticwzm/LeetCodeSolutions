package wzm;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Map.Entry;

public class GroupAnagrams {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String[] strs = { "eat", "tea", "tan", "ate", "nat", "bat" };

		System.out.println(groupAnagrams(strs));
	}

	/**
	 * 
	 * @param strs
	 * @return
	 */

	public static List<List<String>> groupAnagrams(String[] strs) {

		List<List<String>> stringList = new ArrayList<List<String>>();
		quickSort(strs, 0, strs.length - 1);

		Map<Map<Character, Integer>, ArrayList<String>> anagramsMap = new HashMap<Map<Character, Integer>, ArrayList<String>>();
		for (String str : strs) {
			anagramsGrouping(anagramsMap, str);
		}

		for (Entry<Map<Character, Integer>, ArrayList<String>> : anagramsMap.entrySet()) {
			
		}

		return stringList;
	}

	private static void quickSort(String[] strs, int left, int right) {

		int l = left;
		int r = right;
		String pivot = strs[left + (right - left >> 1)];

		while (l <= r) {
			while (strs[l].compareTo(pivot) < 0) {
				l++;
			}
			while (strs[r].compareTo(pivot) > 0) {
				r--;
			}
			if (l <= r) {
				swap(strs, l, r);
				l++;
				r--;
			}
		}
		if (l < right) {
			quickSort(strs, l, right);
		}
		if (left < r) {
			quickSort(strs, left, r);
		}
	}

	private static void swap(String[] strs, int a, int b) {

		String temp = strs[a];
		strs[a] = strs[b];
		strs[b] = temp;
	}

	private static void anagramsGrouping(Map<Map<Character, Integer>, ArrayList<String>> anagramsMap, String s) {

		HashMap<Character, Integer> letterFrequency = new HashMap<Character, Integer>();
		for (int i = 0; i < s.length(); i++) {
			letterFrequency.put(s.charAt(i), letterFrequency.getOrDefault(s.charAt(i), 0) + 1);
		}
		if (!anagramsMap.containsKey(letterFrequency)) {
			anagramsMap.put(letterFrequency, new ArrayList<String>());
		}
		anagramsMap.get(letterFrequency).add(s);
	}
}
